# coding:utf-8# import os# import sys# import time# import cv2# import argparse### def process_video(input, output):#     if not os.path.exists(output):#         os.makedirs(output)##     vid = cv2.VideoCapture(input)#     proc_frames = 0#     ret, frame = vid.read()#     while ret:#         out_file = output + '/{:0>6d}.png'.format(proc_frames)#         cv2.imwrite(out_file, frame)#         ret, frame = vid.read()#         proc_frames += 1#     vid.release()### if __name__ == "__main__":#     parser = argparse.ArgumentParser()#     parser.add_argument("--input", default="heheda.mp4", type=str)#     parser.add_argument("--output", default="images", type=str)#     args = parser.parse_args()##     start_time = time.time()#     process_video(args.input, args.output)##     print(#         "Method {}: Input:{}, Time taken: {}".format(#             sys.argv[0], args.input, time.time() - start_time#         )#     )import osimport cv2import sysimport timeimport argparseimport multiprocessing as mpdef process_video(group_number):    vid = cv2.VideoCapture(args.input)    pos_frames = int(frame_jump_unit * group_number)    vid.set(cv2.CAP_PROP_POS_FRAMES, pos_frames)    proc_frames = 0    if not os.path.exists(args.output):        os.makedirs(args.output)    if group_number != num_processes - 1:        not_last_seg = True    else:        not_last_seg = False    ret, frame = vid.read()    while ret:        if not_last_seg and proc_frames == frame_jump_unit:            break        out_file = args.output + '/{:0>6d}.png'.format(proc_frames + pos_frames)        cv2.imwrite(out_file, frame)        ret, frame = vid.read()        proc_frames += 1    vid.release()    return Noneif __name__ == "__main__":    video_filename = "/Users/wangbiao/Downloads/demo/video/视频内容分析.mp4"    parser = argparse.ArgumentParser()    parser.add_argument("--input", default=video_filename, type=str)    parser.add_argument("--output", default="/Users/wangbiao/Downloads/demo/video/视频内容分析", type=str)    args = parser.parse_args()    start_time = time.time()    num_processes = mp.cpu_count()    vid = cv2.VideoCapture(args.input)    frame_jump_unit = vid.get(cv2.CAP_PROP_FRAME_COUNT) // num_processes    width = int(vid.get(cv2.CAP_PROP_FRAME_WIDTH))    height = int(vid.get(cv2.CAP_PROP_FRAME_HEIGHT))    fps = vid.get(cv2.CAP_PROP_FPS)    vid.release()    p = mp.Pool(num_processes)    p.map(process_video, range(num_processes))    p.close()    p.join()    print(        "Method {}: Input:{}, Output:{}, Time taken: {}".format(            sys.argv[0], args.input, args.output, time.time() - start_time        )    )# 原文链接：https: // blog.csdn.net / oqqENvY12 / article / details / 103770352